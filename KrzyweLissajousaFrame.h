#ifndef __KrzyweLissajousaFrame__
#define __KrzyweLissajousaFrame__

/**
@file
Subclass of Frame, which is generated by wxFormBuilder.
*/

#include "GUI.h"

//// end generated include
#include "Matrix4d.h"
#include "Vector4d.h"
#include "Point3D.h"
#include "HelperFunctions.h"
#include <wx/dcclient.h>
#include <wx/dcbuffer.h>
#include <wx/colordlg.h>
#include <math.h>
#include <memory>


/** Implementing Frame */
class KrzyweLissajousaFrame : public Frame
{
	protected:
		// Handlers for Frame events.
		void OnSizeChange( wxSizeEvent& event );
		void rotationX_Update( wxScrollEvent& event );
		void rotationY_Update( wxScrollEvent& event );
		void rotationZ_Update( wxScrollEvent& event );
		void sposobRysowania_update( wxCommandEvent& event );
		void A_update( wxScrollEvent& event );
		void a_update( wxScrollEvent& event );
		void f_a_update( wxScrollEvent& event );
		void B_update( wxScrollEvent& event );
		void b_update( wxScrollEvent& event );
		void f_b_update( wxScrollEvent& event );
		void C_update( wxScrollEvent& event );
		void c_update( wxScrollEvent& event );
		void f_c_update( wxScrollEvent& event );
		void coordinates_update( wxCommandEvent& event );
	public:
		/** Constructor */
		KrzyweLissajousaFrame( wxWindow* parent );
	//// end generated class members

		/**
		 * @brief Funkcja obliczająca współrzędne x,y,z w zaleznosci od parametru t.
		 * @param[in] t Czas.
		 * @return Wspolrzedne x,y,z (Point3D)
		 */
		Point3D calcCartesianPoint3D(double t) const;

		/**
		 * @brief Funkcja obliczająca współrzędne r, phi, theta w zaleznosci od parametru t.
		 * @param[in] t Czas.
		 * @return Wspolrzedne r, phi, theta (Point3D)
		 */
		Point3D calcSphericalPoint3D(double t) const;
		
		/**
		 * @brief Funkcja aktualizująca macierze i punkty do wyrysowania osi.
		 */
		void updateDataForDrawing();
		
		/**
		 * @brief Funkcja obliczająca kolejne punkty krzywej.
		 */
		void calculateCoordinates();

		/**
		 * @brief Funkcja rysująca krzywe i wszystko co znajduje się w drawingPanel.
		 */
		void Repaint();
		
		/**
		 * @brief Destruktor zwalniający zaalokowaną pamięć.
		 */
		~KrzyweLissajousaFrame();

	private:
		/** Zmienna(bool) wskazująca które współrzędne zostały wybrane przez użytkownika.
		* == true(1) współrzędne (r,theta,phi)
		* == false(0) współrzędne (x,y,z)
		*/
		bool _spherical_coordinates;

		/** Zmienna(bool) wskazująca sposób rysowania krzywych Lissajousa.
		* == true(1) odcinki
		* == false(0) punkty
		*/
		bool _drawingMethod;

		int _angleX;	/** Kąt obrotu wykresu względem osi OX. */
		int _angleY;	/** Kąt obrotu wykresu względem osi OY. */
		int _angleZ;	/** Kąt obrotu wykresu względem osi OZ. */

		double _ampX;	/** Amplituda funkcji x(t) oraz r(t). */
		double _ampY;	/** Amplituda funkcji y(t). */
		double _ampZ;	/** Amplituda funkcji z(t). */

		int _aX;	/** Częstość funkcji x(t) oraz r(t). */
		int _bY;	/** Częstość funkcji y(t) oraz współczynnik liniowy phi(t). */
		int _cZ;	/** Częstość funkcji z(t) oraz współczynnik liniowy theta(t). */

		double _shiftX;	/** Przesunięcie funkcji x(t) oraz r(t). */
		double _shiftY;	/** Przesunięcie funkcji y(t) oraz phi(t). */
		double _shiftZ;	/** Przesunięcie funkcji z(t) oraz theta(t). */

		const unsigned int _nodes = 1000;	/** Liczba węzłów do narysowania. */

		/** Tablica przechowująca punkty.
		* _data_points[i] - i-ty punkt (Point3D)
		*/
		std::unique_ptr<Point3D[]> _data_points;

		/** Tablica (Point3D) przechowująca punkty końców osi współrzędnych.
		* _axis_points[0], _axis_points[4], _axis_points[8] - początkowe punkty z których będą rysowane 3 odcinki, których współrzędne są przechowane po kolei w następnych inkesach.
		*/
		Point3D _axis_points[12];

		/** Macierz stosowana dla punktów krzywych Lissajousa, przed skalująca wielkości/odległości dla ekranu. */
		Matrix4d _transform_matrix_before_scale;
		/** Macierz stosowana dla osi współrzędnych, przed skalująca wielkości/odległości dla ekranu. */
		Matrix4d _transform_matrix_before_scale_axis;
		/** Macierz skalująca punkty, aby pasowały do panelu, ekranu. */
		Matrix4d _transform_matrix;

};

#endif // __KrzyweLissajousaFrame__
