#ifndef __KrzyweLissajousaFrame__
#define __KrzyweLissajousaFrame__

/**
@file
Subclass of Frame, which is generated by wxFormBuilder.
*/

#include "GUI.h"

//// end generated include
#include "Matrix4d.h"
#include "Vector4d.h"
#include "HelperFunctions.h"
#include <wx/dcclient.h>
#include <wx/dcbuffer.h>
#include <wx/colordlg.h>
#include <math.h>

/** Implementing Frame */
class KrzyweLissajousaFrame : public Frame
{
	protected:
		// Handlers for Frame events.
		void OnSizeChange( wxSizeEvent& event );
		void rotationX_Update( wxScrollEvent& event );
		void rotationY_Update( wxScrollEvent& event );
		void rotationZ_Update( wxScrollEvent& event );
		void sposobRysowania_update( wxCommandEvent& event );
		void A_update( wxScrollEvent& event );
		void a_update( wxScrollEvent& event );
		void f_a_update( wxScrollEvent& event );
		void B_update( wxScrollEvent& event );
		void b_update( wxScrollEvent& event );
		void f_b_update( wxScrollEvent& event );
		void C_update( wxScrollEvent& event );
		void c_update( wxScrollEvent& event );
		void f_c_update( wxScrollEvent& event );
		void coordinates_update( wxCommandEvent& event );
	public:
		/** Constructor */
		KrzyweLissajousaFrame( wxWindow* parent );
	//// end generated class members

		/**
		 * @brief Funkcja obliczająca wartość X, dla określonej amplitudy, 'a' oraz kąta przesunięcia.
		 * @param[in] t Czas.
		 * @return Wartość, zależna od podanego t.
		 */
		double functionX(double t) const;
		/**
		 * @brief Funkcja obliczająca wartość Y, dla określonej amplitudy, 'b' oraz kąta przesunięcia.
		 * @param[in] t Czas.
		 * @return Wartość, zależna od podanego t.
		 */
		double functionY(double t) const;
		/**
		 * @brief Funkcja obliczająca wartość X, dla określonej amplitudy, 'c' oraz kąta przesunięcia.
		 * @param[in] t Czas.
		 * @return Wartość, zależna od podanego t.
		 */
		double functionZ(double t) const;

		/**
		 * @brief Funkcja obliczająca wartość R, czyli długość wektora we współrzędnych biegunowych.
		 * @param[in] t Czas.
		 * @return Obliczona wartość R, zależna od podanego t.
		 */
		double functionR(double t) const;
		/**
		 * @brief Funkcja obliczająca wartość Theta, czyli stopień kąta obrotu na płaszczyźnie XZ we współrzędnych biegunowych.
		 * @param[in] t Czas.
		 * @return Obliczona wartość theta, zależna od podanego t.
		 */
		double functionTheta(double t, double r) const;
		/**
		 * @brief Funkcja obliczająca wartość Phi, czyli stopień kąta obrotu na płaszczyźnie XY we współrzędnych biegunowych.
		 * @param[in] t Czas.
		 * @return Obliczona wartość Phi, zależna od podanego t.
		 */
		double functionPhi(double t) const;
		
		/**
		 * @brief Funkcja aktualizująca macierze i punkty do wyrysowania osi.
		 */
		void updateDataForDrawing();
		
		/**
		 * @brief Funkcja obliczająca punkty dla współrzędnych biegunowych (r, theta, phi).
		 */
		void calculateCartesianCoordinates();
		/**
		 * @brief Funkcja obliczająca punkty dla współrzędnych kartezjańskich (x, y, z).
		 */
		void RepaintBipolarCoordinates();
		/**
		 * @brief Funkcja rysująca krzywe Lissajousa i wszystkiego co znajduje się w drawingPanel.
		 */
		void Repaint();
		
		/**
		 * @brief Destruktor zwalniający zaalokowaną pamięć.
		 */
		~KrzyweLissajousaFrame();
	private:
		/** Zmienna(bool) wskazująca które współrzędne zostały wybrane przez użytkownika.
		* == true(1) współrzędne (r,theta,phi)
		* == false(0) współrzędne (x,y,z)
		*/
		bool _coordinates_bipilar;

		/** Zmienna(bool) wskazująca sposób rysowania krzywych Lissajousa.
		* == true(1) odcinki
		* == false(0) punkty
		*/
		bool _drawingMethod;
		int _angleX;	/** Kąt obrotu wykresu względem osi OX. */
		int _angleY;	/** Kąt obrotu wykresu względem osi OY. */
		int _angleZ;	/** Kąt obrotu wykresu względem osi OZ. */

		double _ampX;	/** Amplituda funkcji x(t). */
		double _ampY;	/** Amplituda funkcji y(t). */
		double _ampZ;	/** Amplituda funkcji z(t). */
		int _aX;	/** a funkcji x(t). */
		int _bY;	/** b funkcji y(t). */
		int _cZ;	/** c funkcji z(t). */
		double _shiftX;	/** Przesunięcie funkcji x(t). */
		double _shiftY;	/** Przesunięcie funkcji y(t). */
		double _shiftZ;	/** Przesunięcie funkcji z(t). */

		const unsigned int _nodes = 200;	/** Liczba węzłów do narysowania. */
		/** Tablica przechowująca punkty.
		* _data_points[][0] - współrzędna x
		* _data_points[][1] - współrzędna y
		* _data_points[][2] - współrzędna z
		*/
		double(*_data_points)[3];
		/** Tablica przechowująca punkty początku i końców oś współrzędnych.
		* _axis_points[0][] - wspołrzędne (x, y, z) punktu początkowego 
		* _axis_points[][0] - współrzędna x
		* _axis_points[][1] - współrzędna y
		* _axis_points[][2] - współrzędna z
		*/
		double _axis_points[6][3];

		/** Macierz stosowana dla punktów krzywych Lissajousa, przed skalująca wielkości/odległości dla ekranu. */
		Matrix4d _transform_matrix_before_scale;
		/** Macierz stosowana dla osi współrzędnych, przed skalująca wielkości/odległości dla ekranu. */
		Matrix4d _transform_matrix_before_scale_axis;
		/** Macierz skalująca punkty, aby pasowały do panelu, ekranu. */
		Matrix4d _transform_matrix;

};

#endif // __KrzyweLissajousaFrame__
